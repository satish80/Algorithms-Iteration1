
#include<stdio.h>


struct Node
{
  int data;
  Node *next;
};

Node *ReverseList(Node *);
Node *BuildList(int count);
void DeleteList(Node **);
int Pop(Node **);
void insertNth(Node **,int,int);
void sortedInsert(Node **,Node *);
void insertSort(Node **);
void append(Node**,Node**);
void removeDuplicates(Node**);

int main(void)
{
Node *head = BuildList(10);
Node *current = head;

while(current != NULL)
{
  cout<<current->data<<endl;
  current = current->next;
}

cout<<"--------------------"<<endl;

head = ReverseList(head);
current = head;

while(current != NULL)
{
  cout<<current->data<<endl;
  current = current->next;
}

cout<<"--------------------"<<endl;


//DeleteList(&head);
//insertNth(&head,3,10);
//insertNth(&head,0,35);
Node *newNode = (Node *)malloc(sizeof(Node));
newNode->data = 1;
sortedInsert(&head,newNode);

//insertSort(&head);

/* Appending Lists **********
Node *head2 = BuildList(5);
DeleteList(&head);
append(&head,&head2);
***************/
removeDuplicates(&head);

current = head;
while(current != NULL)
{
  cout<<current->data<<endl;
  current = current->next;
}

cout<<"--------------------"<<endl;
cout<<Pop(&head)<<endl;
cout<<Pop(&head)<<endl;;
cout<<"--------------------"<<endl;

return 0;
}

void removeDuplicates(Node **headPtr)
{
  // -- Check at the head first?
  Node *current = *headPtr;
  while(current != NULL && current->next!=NULL)
  {
   if(current->data == current->next->data)
   {
	Node *remove = current->next;
        current->next = current->next->next;
        free(remove);
   }
   else
   {
     current = current->next;
   } 
  }
 
}
void DeleteList(Node **headPtr)
{
  Node *temp;
  while(*headPtr != NULL)
  {
     temp = (*headPtr)->next;
     free(*headPtr);
     *headPtr = temp;
  }
}

void append(Node **headPtr, Node **appendPtr)
{
    if((*headPtr)==NULL)
    {
       *headPtr = *appendPtr;
       *appendPtr=NULL;
       return;
    }
   
    Node *tail = *headPtr;
    while(tail->next !=NULL) tail=tail->next;
    tail->next = *appendPtr;
    *appendPtr=NULL;
    return;
    
}
void insertSort(Node **headPtr)
{
   if(*headPtr==NULL)return;
   if((*headPtr)->next == NULL)return;

   Node *retSort=NULL;
   Node *nextNode;
   while(*headPtr != NULL)
  {
    nextNode =(*headPtr)->next;
    sortedInsert(&retSort,*headPtr);
    *headPtr = nextNode;
  }
  
  *headPtr = retSort;

}

void sortedInsert(Node **headPtr,Node *insertNode)
{
   if(*headPtr==NULL || (*headPtr)->data>=insertNode->data)
   {
      insertNode->next = *headPtr;
      *headPtr = insertNode;
      return;
   }
   Node *current = *headPtr;
   while((current->next !=  NULL) && (current->next->data<insertNode->data))
   {
     //cout<<"checking at "<<current->data<<endl;
     current = current->next;
   }
   //cout<<"Insert at "<<current->data<<endl;
   //-- We got where we want to put this.
   insertNode->next = current->next;
   current->next = insertNode;
}

void insertNth(Node **headPtr,int pos,int value)
{
   //-- We need a double pointer here, since we might need to change the first item i.e pos = 0;
   //-- Assuming insertion is at 0th position.
   Node *newNode = (Node *)malloc(sizeof(Node));
   Node *tempNode = *headPtr;
   newNode->data = value;
   if(pos==0)
   {
      newNode->next = *headPtr;;
      *headPtr = newNode;
   }
   else
   {
     while(pos>0 && tempNode!=NULL)
     {
       tempNode = tempNode->next;
       pos--;
     }
     if(pos>0) return; //basically error
     newNode->next = tempNode->next;
     tempNode->next = newNode;
   }  
}

int Pop(Node **headPtr)
{
   if(*headPtr == NULL) return -1;
   int value = (*headPtr)->data;
   Node *temp = (*headPtr)->next;
   free(*headPtr);
   *headPtr = temp;
   return(value);
}

void DeleteList1(Node **headPtr)
{
   Node* current = *headPtr;
   Node* temp;
   while(current!=NULL)
   {
      temp = current->next;
      cout<<temp->data;
      
      free(current);
      current=temp;
   }
   *headPtr = NULL;
}

Node *ReverseList(Node *head)
{
   Node *previous = NULL;
   Node *temp;
   Node *currPtr = head;
   while(currPtr != NULL)
   {
      temp = currPtr->next;
      currPtr->next=previous;
      previous = currPtr;
      currPtr = temp;
   }
  
  return previous;
}

Node *BuildList(int count)
{
  struct Node dummy;
  Node *tail = &dummy;

  while(count >0)
  {
     Node *newNode = (Node *)malloc(sizeof(Node));
     newNode->data = count;
     newNode->next = NULL;
     tail->next=newNode;
     tail=newNode;
     count--;
  }

  return(dummy.next);
}